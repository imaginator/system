import org.openhab.core.model.script.ScriptServiceUtil

rule "KNX Volume Contol"
when
    Member of gKNXVolume received command
then
    logInfo("KNXVolumeControl","triggered: {}",triggeringItem.name)
    var room = triggeringItem.name.replace("KNXVolume","") 
    logInfo("KNXVolumeControl","extracted room: {}", room)
    var String ChromecastDeviceName = "ChromecastAudio" + room + "Volume" 
    logInfo("KNXVolumeControl","Will change volume on: {}", ChromecastDeviceName)
    var CurrentVolume = ScriptServiceUtil.getItemRegistry.getItem(ChromecastDeviceName).state as DecimalType
    logInfo("KNXVolumeControl","CurrentVolume: {}", CurrentVolume)
    
    if (receivedCommand == OFF) {
        sendCommand(ChromecastDeviceName , ((CurrentVolume - 5).toString()))
    }
    else if (receivedCommand == ON) {
        sendCommand(ChromecastDeviceName ,  ((CurrentVolume + 5).toString()))
    }
end

// Trigger ⏯️ and ⏭️ based on long kepresses on the KNX buttons.
// eg: from KNXPlayback<BathroomGuest>
//   to ChromecastAudio<BathroomGuest>Control

rule "KNX Play/Pause/Next"
when
    Member of gKNXPlayback received command
then
    var String room = triggeringItem.name.replace("KNXPlayback","")
    var String ChromecastDeviceName = "ChromecastAudio" + room + "Control"
    var CurrentPlaybackState = ScriptServiceUtil.getItemRegistry.getItem(ChromecastDeviceName).state
    if (receivedCommand == OFF) {
        // toggle play / pause
        if (CurrentPlaybackState == PAUSE) {
           logInfo("KNX Play/Pause/Next", "resuming playback in {}", room)
           sendCommand(ChromecastDeviceName , "PLAY")
        }
        else if (CurrentPlaybackState == PLAY) {
           logInfo("KNX Play/Pause/Next", "pausing in {}", room)
           sendCommand(ChromecastDeviceName , "PAUSE")
        }
    }
    // play next track
    else if (receivedCommand == ON) {
        // NEXT/PREVIOUS not supported directly in Chomecast binding 
        // currentTime 	Number:Time 	Current time of currently playing media
        // duration 	Number:Time 	Duration of current track (null if between tracks)
        logInfo("KNX Play/Pause/Next", "skipping track in {}", room)
        var String DurationItem = "ChromecastAudio" + room + "Duration"                     // ChromecastAudioStudyDuration
        var String PlaybackPositionItem = "ChromecastAudio" + room + "CurrentTime"          // ChromecastAudioStudyCurrentTime
        val TrackLength = ScriptServiceUtil.getItemRegistry.getItem(DurationItem).state     // "234.5 s" (QuantityType)
        val NewPlaybackPosition = (TrackLength as Number) - 1
        logInfo("KNXVolumeControl","Track length: {}", TrackLength)
        logInfo("KNXVolumeControl","Track length variable type: {}", TrackLength.getClass.getSimpleName)
        logInfo("KNXVolumeControl","Jumping to: {}", NewPlaybackPosition)
        sendCommand(PlaybackPositionItem , (NewPlaybackPosition))
    }
end
 